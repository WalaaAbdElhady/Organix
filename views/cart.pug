extends base

block content
  main
    .container
      .row
        .col.s12.m6
          h3 Your Cart
        .col.s12.m6.right-align
          h3#total Total: #{totalPrice} EGP
      .row
        if myCart.length > 0
          each cartItem in myCart
            each product in cartItem.products
              .col.s12
                .cart.horizontal
                  .cart-image.col.s4
                    img(src=`imgs/${product.product.photo}`, alt=product.product.name, style="width: 250px;")
                    h4 #{product.product.name}
                    p.price Price: #{product.product.price} EGP
                  .card-stacked.col
                    .card-action.col
                      .input-field.inline.col.s12
                        button.btn-floating.waves-effect.waves-light.green(type="button", data-action="increase", data-cart-id=`${cartItem._id}`, data-product-id=`${product.product._id}`, data-product-price=`${product.product.price}`)
                          i.material-icons add
                        input#quantity.text-left.col.validate(type="text", value=`${product.quantity}`, data-cart-id=`${cartItem._id}`, data-product-id=`${product.product._id}`, data-product-price=`${product.product.price}`)
                        button.btn-floating.waves-effect.waves-light.red(type="button", data-action="decrease", data-cart-id=`${cartItem._id}`, data-product-id=`${product.product._id}`, data-product-price=`${product.product.price}`)
                          i.material-icons remove
                      button.btn.green.book-cart(type='button') Book
                      button.btn.red.remove-cart(type='button', data-product-id=product.product._id) Remove
        else
          p Your cart is empty

  script.
    document.addEventListener('DOMContentLoaded', () => {
      const updateQuantityOnServer = (cartId, productId, quantity) => {
        fetch(`/api/v1/carts/${cartId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId: productId,
            quantity: quantity
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'success') {
            console.log('Quantity updated successfully');
            updateTotalPrice();
          } else {
            console.error('Failed to update quantity');
          }
        })
        .catch(error => {
          console.error('Error:', error);
        });
      };

      const updateQuantity = (cartId, productId, action) => {
        const quantityInput = document.querySelector(`input[data-cart-id="${cartId}"][data-product-id="${productId}"]`);
        let currentQuantity = parseInt(quantityInput.value);
        
        if (action === 'increase') {
          currentQuantity += 1;
        } else if (action === 'decrease' && currentQuantity > 1) {
          currentQuantity -= 1;
        }
        
        quantityInput.value = currentQuantity;
        updateQuantityOnServer(cartId, productId, currentQuantity);
      };

      const updateTotalPrice = () => {
        let totalPrice = 0;
        document.querySelectorAll('input#quantity').forEach(input => {
          const quantity = parseInt(input.value);
          const price = parseFloat(input.getAttribute('data-product-price'));
          totalPrice += quantity * price;
        });
        document.getElementById('total').textContent = `Total: ${totalPrice.toFixed(2)} EGP`;
      };

      document.querySelectorAll('button[data-action]').forEach(button => {
        button.addEventListener('click', (event) => {
          const cartId = event.target.closest('button').getAttribute('data-cart-id');
          const productId = event.target.closest('button').getAttribute('data-product-id');
          const action = event.target.closest('button').getAttribute('data-action');
          updateQuantity(cartId, productId, action);
        });
      });
    });

  style.
    html {
      height: 100%;
    }
    body {
      display: flex;
      flex-direction: column;
      min-height: 100%;
    }
    main {
      flex: 1;
    }
